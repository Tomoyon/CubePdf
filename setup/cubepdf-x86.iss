; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{6BBF4252-CB6B-4E0B-9E5B-1719B7934917}
AppName=CubePDF
AppPublisher=CubeSoft
AppVerName=CubePDF 0.9.1
AppPublisherURL=http://www.cube-soft.jp/
AppSupportURL=http://www.cube-soft.jp/
AppUpdatesURL=http://www.cube-soft.jp/
DefaultDirName={pf}\CubePDF
DefaultGroupName=CubeSoft\CubePDF
AllowNoIcons=true
LicenseFile=C:\projects\cubepdf\release\GNU General Public License.txt
OutputDir=C:\projects\cubepdf
OutputBaseFilename=cubepdf-x86
SetupIconFile=C:\projects\cubepdf\release\app.ico
Compression=lzma
SolidCompression=true
InternalCompressLevel=max
VersionInfoVersion=0.9.1
VersionInfoCompany=CubeSoft
VersionInfoDescription=CubePDF Virtual Printer
VersionInfoCopyright=Copyright (c) 2010 CubeSoft
VersionInfoProductName=CubePDF
AlwaysRestart=false
RestartIfNeededByRun=false

[Languages]
Name: japanese; MessagesFile: compiler:Languages\Japanese.isl

[Dirs]
Name: {app}; Permissions: everyone-full

[Files]
Source: ..\release\x86\cubepdf.exe; DestDir: {app}; Flags: ignoreversion 32bit
Source: ..\release\x86\cubepdf-redirect.exe; DestDir: {app}; Flags: ignoreversion 32bit
Source: ..\release\x86\cubepdf-checker.exe; DestDir: {app}; Flags: ignoreversion 32bit
Source: ..\release\x86\cube-key-gen.exe; Flags: dontcopy 32bit
Source: ..\release\x86\cliff.dll; DestDir: {app}; Flags: ignoreversion 32bit
Source: ..\release\x86\gsdll32.dll; DestDir: {app}; Flags: ignoreversion 32bit
Source: ..\release\gpl-3.0.txt; DestDir: {app}; Flags: ignoreversion deleteafterinstall onlyifdestfileexists
Source: ..\release\Readme.txt; DestDir: {app}; Flags: ignoreversion
Source: ..\release\GNU General Public License.txt; DestDir: {app}; Flags: ignoreversion
Source: ..\release\AFPL License.txt; DestDir: {app}; Flags: ignoreversion
Source: ..\release\CubePDF_ユーザーズマニュアル.pdf; DestDir: {app}; Flags: isreadme ignoreversion
Source: ..\release\advance.reg; DestDir: {app}; Flags: ignoreversion
Source: ..\release\appendix.reg; DestDir: {app}; Flags: ignoreversion
Source: ..\release\x86\ghostscript\*; DestDir: {win}\CubePDF; Flags: ignoreversion recursesubdirs createallsubdirs 32bit
; NOTE: Don't use "Flags: ignoreversion" on any shared system files
Source: ..\release\x86\redmon\redmonnt.dll; DestDir: {sys}; DestName: cuberedmon.dll; Flags: ignoreversion onlyifdoesntexist 32bit
Source: ..\release\x86\printer\CubePDF.PPD; DestDir: {code:GetPrinterDriverDirectoryName|}
Source: ..\release\x86\printer\PS5UI.dll; DestDir: {code:GetPrinterDriverDirectoryName|}; Flags: ignoreversion onlyifdoesntexist deleteafterinstall 32bit
Source: ..\release\x86\printer\PSCRIPT5.dll; DestDir: {code:GetPrinterDriverDirectoryName|}; Flags: ignoreversion onlyifdoesntexist deleteafterinstall 32bit
Source: ..\release\x86\printer\PSCRIPT.NTF; DestDir: {code:GetPrinterDriverDirectoryName|}; Flags: ignoreversion onlyifdoesntexist deleteafterinstall
Source: ..\release\x86\printer\PSCRIPT.HLP; DestDir: {code:GetPrinterDriverDirectoryName|}; Flags: ignoreversion onlyifdoesntexist deleteafterinstall

[Icons]
Name: {group}\{cm:ProgramOnTheWeb,CubePDF}; Filename: http://www.cube-soft.jp/
Name: {group}\{cm:UninstallProgram,CubePDF}; Filename: {uninstallexe}
Name: {group}\CubePDF ユーザーズマニュアル; Filename: {app}\CubePDF_ユーザーズマニュアル.pdf

[Registry]
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF; Permissions: system-full admins-full users-read; Flags: uninsdeletekey
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; Permissions: system-full admins-full users-read; Flags: uninsdeletekey
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: string; Valuename: Arguments; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: string; Valuename: Command; ValueData: {code:GetShortName|{app}\cubepdf-redirect.exe}; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: Delay; ValueData: 300; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: string; Valuename: Description; ValueData: CubePDF Redirected Port; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: LogFileDebug; ValueData: 0; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: LogFileUse; ValueData: 0; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: Output; ValueData: 0; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: string; Valuename: Printer; ValueData: CubePDF; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: Printerror; ValueData: 0; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: Runuser; ValueData: 1; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; ValueType: dword; Valuename: ShowWindow; ValueData: 2; Flags: uninsdeletevalue; Permissions: system-full admins-full users-read
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Printers\CubePDF; Flags: uninsdeletekey dontcreatekey
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Environments\Windows x64\Drivers\CubePDF; Flags: uninsdeletekey dontcreatekey; MinVersion: 4.00.950,0
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Environments\Windows NT x86\Drivers\CubePDF; Flags: uninsdeletekey dontcreatekey; MinVersion: 0,4.00.1381
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports\CubePDF:; Flags: uninsdeletekey dontcreatekey
Root: HKLM; Subkey: System\CurrentControlSet\Control\Print\Monitors\CubePDF; Flags: uninsdeletekey dontcreatekey
Root: HKCU; Subkey: Software\CubePDF; Flags: uninsdeletekey
Root: HKCU; Subkey: Software\CubePDF; ValueType: dword; ValueName: DeleteInputFile; ValueData: 1; Flags: uninsdeletekey
Root: HKCU; Subkey: Software\CubePDF; ValueType: dword; ValueName: CheckUpdate; ValueData: 0
Root: HKCU; Subkey: Software\CubePDF; ValueType: dword; ValueName: Initialize; ValueData: 1
Root: HKLM; Subkey: Software\CubePDF; ValueType: string; ValueName: Version; ValueData: 0.9.0β
Root: HKLM; Subkey: Software\CubePDF; ValueType: string; ValueName: InstallDirectory; ValueData: {app}
[UninstallDelete]
Name: {win}\CubePDF\*; Type: filesandordirs
Name: {app}\*; Type: filesandordirs
Name: {app}; Type: dirifempty
[CustomMessages]
japanese.win9x=Windows 95/98/ME/NT には対応していません。
japanese.dotnet=お使いのコンピュータにMicrosoft .Net Frameworkがインストールされていません。インストール後に再実行して下さい。今すぐMicosoft .Net Frameworkのダウンロードページへ移動しますか？
japanese.ToolbarTitle=追加アプリケーション
japanese.ToolbarSubtitle=以下のアプリケーションをインストールしますか？
japanese.ToolbarDescription=追加的にインストールするアプリケーションを選択して下さい。
japanese.ToolbarWeather=天気予報コム for Windows
japanese.UpdateTitle=アップデートの確認
japanese.UpdateSubtitle=コンピュータの起動時に CubePDF のアップデートを確認しますか？
japanese.UpdateDescription=アップデートを確認するかどうか指定して下さい。
japanese.Yes=はい
japanese.No=いいえ
japanese.locked=CubePDF プログラムが実行中です。インストールを続行するためには、プログラムを終了させる必要があります。プログラムを終了させますか？
[Code]
const
 SIZE_OF_MONITORINFO1 = $4;
 SIZE_OF_PORTINFO2 = $14;
 SIZE_OF_PRINTERINFO2 = $54;
 SIZE_OF_DRIVERINFO3 = $28;
 PRINTER_ENUM_LOCAL = $2;

 STANDARD_RIGHTS_REQUIRED = $F0000;
 PRINTER_ACCESS_ADMINISTER = $4;
 PRINTER_ACCESS_USE = $8;
 PRINTER_ALL_ACCESS = (STANDARD_RIGHTS_REQUIRED Or PRINTER_ACCESS_ADMINISTER Or PRINTER_ACCESS_USE);

 SC_MANAGER_ALL_ACCESS = $f003f;
 SERVICE_CONTROL_STOP  = $1;
 SERVICE_QUERY_STATUS  = $4;
 SERVICE_RUNNING       = $4;
 SERVICE_START		   = $10;
 SERVICE_STOP		   = $20;

 ERROR_SUCCESS = 0;
 ERROR_MORE_DATA = 234;
 STANDARD_RIGHTS_ALL = $1F0000;
 KEY_QUERY_VALUE = $1;
 KEY_SET_VALUE = $2;
 KEY_CREATE_SUB_KEY = $4;
 KEY_ENUMERATE_SUB_KEYS = $8;
 KEY_NOTIFY = $10;
 KEY_CREATE_LINK = $20;
 SYNCHRONIZE = $100000;
 KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE));

type
	TAInt = Array of Integer;
	TAStr = Array of String;

    // --------------------------------------------------------------------- //
    //  TPrinterDefaults
    // --------------------------------------------------------------------- //
    TPrinterDefaults = record
        pDatatype:      LongInt;
        pDevMode:       LongInt;
        DesiredAccess:  LongInt;
    end;

    // --------------------------------------------------------------------- //
    //  TPortInfo2
    // --------------------------------------------------------------------- //
    TPortInfo2 = record
        pPortName:      String;
        pMonitorName:   String;
        pDescription:   String;
        fPortType:      LongInt;
        Reserved:       LongInt;
    end;

    // --------------------------------------------------------------------- //
    //  TMonitorInfo1
    // --------------------------------------------------------------------- //
    TMonitorInfo1 = record
        pName: String;
    end;

    // --------------------------------------------------------------------- //
    //  TMonitorInfo2
    // --------------------------------------------------------------------- //
    TMonitorInfo2 = record
        pName:          String;
        pEnvironment:   String;
        pDLLName:       String;
    end;

    // --------------------------------------------------------------------- //
    //  TDriverInfo3
    // --------------------------------------------------------------------- //
    TDriverInfo3 = record
        cVersion:           LongInt;
        pName:              String;
        pEnvironment:       String;
        pDriverPath:        String;
        pDataFile:          String;
        pConfigFile:        String;
        pHelpFile:          String;
        pDependentFiles:    String;
        pMonitorName:       String;
        pDefaultDataType:   String;
    end;

    // --------------------------------------------------------------------- //
    //  TPrinterInfo2
    // --------------------------------------------------------------------- //
    TPrinterInfo2 = record
        pServerName:            String;
        pPrinterName:           String;
        pShareName:             String;
        pPortName:              String;
        pDriverName:            String;
        pComment:               String;
        pLocation:              String;
        pDevMode:               LongInt;
        pSepFile:               String;
        pPrintProcessor:        String;
        pDatatype:              String;
        pParameters:            String;
        pSecurityDescriptor:    LongInt;
        Attributes:             LongInt;
        Priority:               LongInt;
        DefaultPriority:        LongInt;
        StartTime:              LongInt;
        UntilTime:              LongInt;
        Status:                 LongInt;
        cJobs:                  LongInt;
        AveragePPM:             LongInt;
    end;
// end of type

var progTitel, progHandle: TArrayOfString;
    msg : TAStr;
    FullInstallation : boolean;
    Printername, Printerdrivername, Printerportname, Printermonitorname,
     LogFile, UninstallLogfile,
     PrintSystem, Win9x, WinNT, Win2000, WinXP, Win2003,
     WinXP2003_32bit, WinXP2003_64bit : String;
    //AdditionalPrinterProgressSteps, AdditionalPrinterProgressIndex: LongInt;
    //ProgressPage: TOutputProgressWizardPage;

    //cmdlPrintername, cmdlPPDFile, cmdlREGFile,
    //cmdlSaveInfFile, cmdlLoadInfFile: String;
    //cmdlSilent, cmdlVerysilent, cmdlForceInstall, cmdlDontUseYahooSearch: Boolean;

    //desktopicon, desktopicon_common, desktopicon_user,
    //quicklaunchicon, fileassoc, winexplorer: Boolean;

    //SCPage:TWizardPage;
    //PrinternamePage: TInputQueryWizardpage;
    //PrinterdriverPage : TInputOptionWizardPage;
    //StandardmodusRB, ServermodusRB: TRadioButton;
    //StandardmodusLabel: TLabel;
    //ServerDescriptionPage: TOutputMsgWizardPage;
    ToolbarPage: TInputOptionWizardPage;
    UpdatePage: TInputOptionWizardPage;
    IsInstalledWeather: Boolean;
    PrinterInstallationSuccessfully, Servermodus, Win9xPrinterdriver, WinNtPrinterdriver, Win2k32bitPrinterdriver, Win2k64bitPrinterdriver: Boolean;

// ------------------------------------------------------------------------- //
//
//  IsDotNetDetected
//
//  Indicates whether the specified version and service pack of the
//  .NET Framework is installed.
//
//  version -- Specify one of these strings for the required .NET Framework version:
//    'v1.1.4322'     .NET Framework 1.1
//    'v2.0.50727'    .NET Framework 2.0
//    'v3.0'          .NET Framework 3.0
//    'v3.5'          .NET Framework 3.5
//    'v4\Client'     .NET Framework 4.0 Client Profile
//    'v4\Full'       .NET Framework 4.0 Full Installation
//
//  service -- Specify any non-negative integer for the required service pack level:
//    0               No service packs required
//    1, 2, etc.      Service pack 1, 2, etc. required
// ------------------------------------------------------------------------- //
function IsDotNetDetected(version: string; service: cardinal): boolean;
var
    key: string;
    install, serviceCount: cardinal;
    success: boolean;
begin
    key := 'SOFTWARE\Microsoft\NET Framework Setup\NDP\' + version;
    // .NET 3.0 uses value InstallSuccess in subkey Setup
    if Pos('v3.0', version) = 1 then begin
        success := RegQueryDWordValue(HKLM, key + '\Setup', 'InstallSuccess', install);
    end else begin
        success := RegQueryDWordValue(HKLM, key, 'Install', install);
    end;
    // .NET 4.0 uses value Servicing instead of SP
    if Pos('v4', version) = 1 then begin
        success := success and RegQueryDWordValue(HKLM, key, 'Servicing', serviceCount);
    end else begin
        success := success and RegQueryDWordValue(HKLM, key, 'SP', serviceCount);
    end;
    result := success and (install = 1) and (serviceCount >= service);
end;

// ------------------------------------------------------------------------- //
//  IsWindows9x
// ------------------------------------------------------------------------- //
function IsWindows9x(): Boolean;
begin
    if (InstallOnThisVersion('4.00.950,0','0,0') = irInstall) then begin
        Result := true;
    end
    else begin
        Result := false;
    end;
end;

// ------------------------------------------------------------------------- //
//  IsWindowsNT
// ------------------------------------------------------------------------- //
function IsWindowsNT(): Boolean;
begin
    if (InstallOnThisVersion('0,4.0.1381','5.0.2195,0') = irInstall) then begin
        Result := true;
    end
    else begin
        Result := false;
    end;
end;

// ------------------------------------------------------------------------- //
//  CommonFunctions
// ------------------------------------------------------------------------- //
function GetEnvironmentStrings(): LongInt;
 external 'GetEnvironmentStringsA@kernel32.dll';
function FreeEnvironmentStrings(lpsz: LongInt): LongInt;
 external 'FreeEnvironmentStringsA@kernel32.dll';
function OpenProcess (dwDesiredAccess : Longint; bInheritHandle : LongInt; dwProcessId : Longint) : Longint;
 external 'OpenProcess@kernel32.dll';
function TerminateProcess (hProcess : Longint; uExitCode : Longint) : Longint;
 external 'TerminateProcess@kernel32.dll';
function CloseHandle (hObject : Longint) : Longint;
 external 'CloseHandle@kernel32.dll';
function GetLastError() : LongInt;
 external 'GetLastError@kernel32.dll stdcall';
function lstrlenA (lpString : LongInt) : LongInt;
 external 'lstrlenA@kernel32.dll stdcall';
function lstrcpyA (lpString1 : String; lpString2 : LongInt) : LongInt;
 external 'lstrcpyA@kernel32.dll stdcall';
function SearchPath(lpPath : String; lpFilename : String; lpExtension : String; nBufferLength : LongInt; lpBuffer : String; lpFilePart : LongInt) : LongInt;
 external 'SearchPathA@kernel32.dll stdcall';

function GetDateString(Default:String):String;
begin
 result:=GetDateTimeString('yyyymmdd',#0,#0)
end;

function GetStrFromPtrA(lpszA : LongInt) : String;
var
 tStr : String;
begin
 tStr := StringOfChar('A',lstrlenA(lpszA));
 lstrcpyA(tStr,lpszA);
 result:=tStr;
end;

function GetLongFromString(LStr : String; StartPos : LongInt) : LongInt;
var
 cStr : String;
begin
 cStr:=Copy(LStr,StartPos,4);
 Result:=Ord(StrGet(cStr,1))       + Ord(StrGet(cStr,2))*256+
         Ord(StrGet(cStr,3))*65536 + Ord(StrGet(cStr,4))*16777216;
end;

function IsX64: Boolean;
begin
 Result:=(ProcessorArchitecture=paX64);
end;

function InstallWin9xPrinterdriver(): Boolean;
begin
 Result:=False;
 If (InstallOnThisVersion('4.00.950,0','0,0')=irInstall) then
  Result:=True;
end;

function InstallWinNtPrinterdriver(): Boolean;
begin
 Result:=False;
 If (InstallOnThisVersion('0,4.0.1381','0,5.0.2195')=irInstall) then
  Result:=True;
 If (InstallOnThisVersion('0,5.0.2195','0,0')=irInstall) then begin
  WinNtPrinterdriver:=True;
  Result:=True
 end;
end;

function InstallWin2kXP2k3Printerdriver32bit(): Boolean;
begin
 Result:=False;
 If (InstallOnThisVersion('0,5.0.2195','0,0')=irInstall) and Not IsWin64 then //win2000
  Result:=True;
 If ((InstallOnThisVersion('0,5.01.2600','0,0')=irInstall) and Not IsWin64) then //Win XP
  Result:=True
end;

function InstallWinXP2k3Printerdriver64bit(): Boolean;
begin
 Result:=False;
 If (InstallOnThisVersion('0,5.01.2600','0,0')=irInstall) and IsWin64 then
  Result:=True;
end;

// ------------------------------------------------------------------------- //
//  GetPrinterDriverDirectory
// ------------------------------------------------------------------------- //
function GetPrinterDriverDirectory(pName: String; pEnvironment: String; Level: LongInt;
    pDriverDirectory: String; cbBuf: LongInt; var pcbNeened: LongInt): Integer;
    external 'GetPrinterDriverDirectoryA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  GetPrinterDriverDirectoryName
// ------------------------------------------------------------------------- //
function GetPrinterDriverDirectoryName(env: String): String;
var
    sb:     LongInt;
    dir :   String;
    status: Integer;
begin
    status := GetPrinterDriverDirectory('', env, 1, '', 0, sb);
    dir := StringOfChar(' ', sb + 1);
    status := GetPrinterDriverDirectory('', env, 1, dir, sb, sb);
    if (status = 0) then
    begin
        dir := ''
    end
    else begin
        dir := CastIntegerToString(CastStringToInteger(dir));
    end;
    Result := dir;
end;

// ------------------------------------------------------------------------- //
//  AddMonitor
// ------------------------------------------------------------------------- //
function AddMonitor(pName: String; Level: LongInt; var pMonitors: TMonitorInfo2): LongInt;
    external 'AddMonitorA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  AddPort
// ------------------------------------------------------------------------- //
function AddPort(pName: String; hwnd: LongInt; pPort: String): LongInt;
    external 'AddPortA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  AddPrinterDriver
// ------------------------------------------------------------------------- //
function AddPrinterDriver(pName: String; Level: LongInt; var pDriverInfo: TDriverInfo3) : LongInt;
    external 'AddPrinterDriverA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  AddPrinter
// ------------------------------------------------------------------------- //
function AddPrinter(pName: String; Level: LongInt; var pPrinter2: TPrinterInfo2): LongInt;
    external 'AddPrinterA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  EnumPorts
// ------------------------------------------------------------------------- //
function EnumPorts(pName: String; Level: LongInt; lpbPorts: String;
    cbBuf: LongInt; var pcbNeeded: LongInt; var pcbReturned: LongInt): LongInt;
    external 'EnumPortsA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  EnumMonitors
// ------------------------------------------------------------------------- //
function EnumMonitors(pName: String; Level: LongInt; lpbMonitors: String;
    cbBuf: LongInt; var pcbNeeded: LongInt; var pcbReturned: LongInt): LongInt;
    external 'EnumMonitorsA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  EnumPrinterDrivers
// ------------------------------------------------------------------------- //
function EnumPrinterDrivers(pName: String; pEnvironment: String; Level: LongInt; lpbPrinterdrivers: String;
    cbBuf: LongInt; var pcbNeeded: LongInt; var pcbReturned: LongInt): LongInt;
    external 'EnumPrinterDriversA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  EnumPrinters
// ------------------------------------------------------------------------- //
function EnumPrinters(flags: LongInt; pName: String; Level: LongInt; lpbPrinters: String;
    cbBuf: LongInt; var pcbNeeded: LongInt; var pcbReturned: LongInt): LongInt;
    external 'EnumPrintersA@winspool.drv stdcall';

function OpenPrinter(pName : String; var phPrinter: Longint; pDefault: TPrinterDefaults): LongInt;
 external 'OpenPrinterA@winspool.drv stdcall';
function ClosePrinter(phPrinter: LongInt): LongInt;
 external 'ClosePrinter@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  DeletePort
// ------------------------------------------------------------------------- //
function DeletePort(pName: String; pHwnd: LongInt; pPortName: String): LongInt;
    external 'DeletePortA@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  DeleteMonitor
// ------------------------------------------------------------------------- //
function DeleteMonitor(pName: String;  pEnviroment: String; pMonitorName: String): LongInt;
    external 'DeleteMonitorA@winspool.drv stdcall';
// ------------------------------------------------------------------------- //
//  DeletePrinter
// ------------------------------------------------------------------------- //
function DeletePrinter(phPrinter: LongInt): LongInt;
    external 'DeletePrinter@winspool.drv stdcall';

// ------------------------------------------------------------------------- //
//  DeletePrinterDriver
// ------------------------------------------------------------------------- //
function DeletePrinterDriver(pName: String; pEnviroment: String; pDriverName: String): LongInt;
    external 'DeletePrinterDriverA@winspool.drv stdcall';

function GetPorts(var Ports : Array of TPortInfo2) : LongInt;
var
 PORT_LEVEL, res, cbBuf, pcbNeeded, pcbReturned, i : LongInt;
 tArr: Array of TPortInfo2;
 tStr:String;
begin
 Setarraylength(tArr,0);
 cbBuf:=0; pcbNeeded:=0; pcbReturned:=0;
 PORT_LEVEL:=2;
 res:=EnumPorts('', PORT_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned);
 if pcbNeeded>0 then begin
  cbBuf:=pcbNeeded;
  tStr:=StringOfChar(#0,pcbNeeded);
  res:=EnumPorts('', PORT_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned);
  Setarraylength(tArr,pcbReturned);
  for i:=0 to pcbReturned-1 do begin
   tArr[i].pPortName:=GetStrFromPtrA(GetLongFromString(tStr,1+i*SIZE_OF_PORTINFO2));
   tArr[i].pMonitorName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PORTINFO2 + 1*4));
   tArr[i].pDescription:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PORTINFO2 + 2*4));
   tArr[i].fPorttype:=GetLongFromstring(tStr,1+i*SIZE_OF_PORTINFO2                   + 3*4);
   tArr[i].Reserved:=GetLongFromstring(tStr,1+i*SIZE_OF_PORTINFO2                    + 4*4);
  end;
 end;
 Ports:=tArr;
 Result:=GetArrayLength(tArr);
end;

function GetMonitors(var Monitors : Array of TMonitorInfo1) : LongInt;
var
 MONITOR_LEVEL, res, cbBuf, pcbNeeded, pcbReturned, i : LongInt;
 tArr: Array of TMonitorInfo1;
 tStr:String;
begin
 Setarraylength(tArr,0);
 cbBuf:=0; pcbNeeded:=0; pcbReturned:=0;
 MONITOR_LEVEL:=1;
 res:=EnumMonitors('', MONITOR_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned)
 if pcbNeeded>0 then begin
  cbBuf:=pcbNeeded;
  tStr:=StringOfChar(#0,pcbNeeded);
 res:=EnumMonitors('', MONITOR_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned)
  Setarraylength(tArr,pcbReturned);
  for i:=0 to pcbReturned-1 do
   tArr[i].pName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_MONITORINFO1));
 end;
 Monitors:=tArr;
 result:=GetArrayLength(tArr);
end;

function CheckMonitorname(MonitornameStr: String): Boolean;
var
 Monitors: Array of TMonitorInfo1; c, i: LongInt;
begin
 Result:=False;
 if Length(MonitornameStr)=0 then exit;
 c:=GetMonitors(Monitors);
 for i:=0 to c-1 do
  If Uppercase(Monitors[i].pName)=Uppercase(MonitornameStr) then begin
   Result:=True;
   exit
  end
end;

// ------------------------------------------------------------------------- //
//  GetPrinterDrivers
// ------------------------------------------------------------------------- //
function GetPrinterDrivers(var PrinterDrivers : Array of TDriverInfo3; Environment: String) : LongInt;
var
 PRINTERDRIVER_LEVEL, res, cbBuf, pcbNeeded, pcbReturned, i : LongInt;
 tArr: Array of TDriverInfo3;
 tStr: String;
begin
 Setarraylength(tArr,0);
 cbBuf:=0; pcbNeeded:=0; pcbReturned:=0;
 PRINTERDRIVER_LEVEL:=3;
 res:=EnumPrinterdrivers('', Environment, PRINTERDRIVER_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned);
 if pcbNeeded>0 then begin
  cbBuf:=pcbNeeded;
  tStr:=StringOfChar(#0,pcbNeeded);
  res:=EnumPrinterdrivers('', Environment, PRINTERDRIVER_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned);
  Setarraylength(tArr,pcbReturned);
  for i:=0 to pcbReturned-1 do begin
   tArr[i].cVersion:=GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3);
   tArr[i].pName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3            + 1*4));
   tArr[i].pEnvironment:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3     + 2*4));
   tArr[i].pDriverPath:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3      + 3*4));
   tArr[i].pDataFile:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3        + 4*4));
   tArr[i].pConfigFile:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3      + 5*4));
   tArr[i].pHelpFile:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3        + 6*4));
   tArr[i].pDependentFiles:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3  + 7*4));
   tArr[i].pMonitorName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3     + 8*4));
   tArr[i].pDefaultDataType:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_DRIVERINFO3 + 9*4));
  end;
 end;
 PrinterDrivers:=tArr;
 result:=GetArrayLength(tArr);
end;

// ------------------------------------------------------------------------- //
//  GetPrinters
// ------------------------------------------------------------------------- //
function GetPrinters(var Printers : Array of TPrinterInfo2) : LongInt;
var
 PRINTER_LEVEL, res, cbBuf, pcbNeeded, pcbReturned, i : LongInt;
 tArr: Array of TPrinterInfo2;
 tStr: String;
begin
 Setarraylength(tArr,0);
 cbBuf:=0; pcbNeeded:=0; pcbReturned:=0;
 PRINTER_LEVEL:=2;
 res:=EnumPrinters(PRINTER_ENUM_LOCAL, '', PRINTER_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned);
 if pcbNeeded>0 then begin
  cbBuf:=pcbNeeded;
  tStr:=StringOfChar(#0,pcbNeeded);
  res:=EnumPrinters(PRINTER_ENUM_LOCAL, '', PRINTER_LEVEL, tStr, cbBuf, pcbNeeded, pcbReturned);
  Setarraylength(tArr,pcbReturned);
  for i:=0 to pcbReturned-1 do begin
   tArr[i].pServername:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2));
   tArr[i].pPrinterName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2    +  1*4));
   tArr[i].pShareName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2      +  2*4));
   tArr[i].pPortName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2       +  3*4));
   tArr[i].pDriverName:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2     +  4*4));
   tArr[i].pComment:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2        +  5*4));
   tArr[i].pLocation:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2       +  6*4));
   tArr[i].pDevMode:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                       +  7*4);
   tArr[i].pSepFile:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2        +  8*4));
   tArr[i].pPrintProcessor:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2 +  9*4));
   tArr[i].pDatatype:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2       + 10*4));
   tArr[i].pParameters:=GetStrFromPtrA(GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2     + 11*4));
   tArr[i].pSecurityDescriptor:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2            + 12*4);
   tArr[i].Attributes:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                     + 13*4);
   tArr[i].Priority:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                       + 14*4);
   tArr[i].DefaultPriority:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                + 15*4);
   tArr[i].StartTime:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                      + 16*4);
   tArr[i].UntilTime:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                      + 17*4);
   tArr[i].Status:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                         + 18*4);
   tArr[i].cJobs:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                          + 19*4);
   tArr[i].AveragePPM:=GetLongFromstring(tStr,1+i*SIZE_OF_PRINTERINFO2                     + 20*4);
  end;
 end;
 Printers:=tArr;
 result:=GetArrayLength(tArr);
end;

// ------------------------------------------------------------------------- //
//  GetCubePDFPrinters
// ------------------------------------------------------------------------- //
function GetCubePDFPrinters(var CubePDFPrinters : Array of TPrinterInfo2) : LongInt;
var
 Printers: Array of TPrinterInfo2;
 SubKeys: TArrayOfString;
 i, j, cP, c: LongInt;
begin
 SetArrayLength(CubePDFPrinters, 0);
 Result:=0;
 cP:=GetPrinters(Printers);
 if RegGetSubkeyNames(HKLM, 'SYSTEM\CurrentControlSet\Control\Print\Monitors\CubePDF\Ports', SubKeys) then
  begin
   c:=0;
   for i:=0 to cP-1 do
    for j:=0 to GetArrayLength(SubKeys)-1 do
     if Uppercase(SubKeys[j])=Uppercase(Printers[i].pPortName) then
      c:=c+1;
   if c>0 then begin
    SetArrayLength(CubePDFPrinters, c);
    c:=0;
    for i:=0 to cP-1 do
     for j:=0 to GetArrayLength(SubKeys)-1 do
      if Uppercase(SubKeys[j])=Uppercase(Printers[i].pPortName) then begin
       CubePDFPrinters[c]:=Printers[i];
       c:=c+1;
      end;
   end;
   Result:=c;
  end;
end;

// ------------------------------------------------------------------------- //
//  InstallMonitor
// ------------------------------------------------------------------------- //
function InstallMonitor(MonitorName: String):Boolean;
var M2:TMonitorInfo2; res:LongInt;
begin
 M2.pName:=MonitorName;
 If UsingWinNT then Begin
   If IsWin64 then
     M2.pEnvironment:='Windows x64'
    else
     M2.pEnvironment:='Windows NT x86';
   M2.pDLLName:='cuberedmon.dll'
  end else Begin
   M2.pEnvironment:='Windows 4.0';
   M2.pDLLName:='cuberedmon.dll'
 end;

 SaveStringToFile(LogFile, 'InstallMonitor:' + #13#10, True)
 SaveStringToFile(LogFile, ' Monitorname : ' + M2.pName  + #13#10, True)
 SaveStringToFile(LogFile, ' Environment : ' + M2.pEnvironment  + #13#10, True)

 res := AddMonitor(Chr(0), 2, M2);
 if res=0 then begin
   Result:=False;
   SaveStringToFile(LogFile, ' Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
  end else begin
   Result:=True;
   SaveStringToFile(LogFile, ' Result: Success' + #13#10#13#10, True)
 end;
 //If UsingWinNT=false then
 // SendMessage(65535, 26, 0, CastStringToInteger(PrintSystem)); // Ini-Refresh !!! Important for Win9x/Me
end;

// ------------------------------------------------------------------------- //
//  InstallPort
// ------------------------------------------------------------------------- //
function InstallPort:Boolean;
var res, tres:Boolean; SubKeyName : String;
begin
 SaveStringToFile(LogFile, 'Install printerport:' + #13#10, True)
 SaveStringToFile(LogFile, ' Portname : CubePDF:' + #13#10, True)
 SubKeyName:= 'System\CurrentControlSet\Control\Print\Monitors\CubePDF';
 SubKeyName:= SubKeyName+'\Ports\CubePDF:';
 res:=true;
 tres:=RegWriteStringValue(HKLM,SubKeyName,'Arguments','');
 res:=res and tres;
 tres:=RegWriteStringValue(HKLM,SubKeyName,'Command',GetShortname(ExpandConstant('{app}')+'\cubepdf-redirect.exe'));
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'Delay',300);
 res:=res and tres;
 tres:=RegWriteStringValue(HKLM,SubKeyName,'Description','CubePDF Redirected Port');
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'LogFileDebug',0);
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'LogFileUse',0);
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'Output',0);
 res:=res and tres;
 tres:=RegWriteStringValue(HKLM,SubKeyName,'Printer', 'CubePDF');
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'PrintError',0);
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'RunUser',1);
 res:=res and tres;
 tres:=RegWriteDWordValue(HKLM,SubKeyName,'ShowWindow',2);
 res:=res and tres;
 if res=false then begin
   SaveStringToFile(LogFile, ' Result: Error ' + #13#10#13#10, True)
  end else
   SaveStringToFile(LogFile, ' Result: Success' + #13#10#13#10, True);
 Result:=res;
 //If UsingWinNT=false then
 // SendMessage(65535, 26, 0, CastStringToInteger(PrintSystem)); // Ini-Refresh !!! Important for Win9x/Me
end;

// ------------------------------------------------------------------------- //
//  InstallDriver
// ------------------------------------------------------------------------- //
function InstallDriver:Boolean;
var DI3:TDriverInfo3; res:LongInt;
begin
 Result:=True;
 DI3.pName := 'CubePDF';
 DI3.pDependentFiles :='';
// Win2000, WinXP, Win2003 - 32bit
 if InstallWin2kXP2k3Printerdriver32bit then begin
//  If InstallOnThisVersion('0,5.0.2195','0,5.01.2600')=irInstall then
//    ProgressPage.SetText(ExpandConstant('{cm:InstallPrinterdriver}'),Win2000)
//   else If InstallOnThisVersion('0,5.0.2600','0,5.02.3790')=irInstall then
//     If IsWin64 then
//       ProgressPage.SetText(ExpandConstant('{cm:InstallPrinterdriver}'),WinXP2003_32bit)
//      else
//       ProgressPage.SetText(ExpandConstant('{cm:InstallPrinterdriver}'),WinXP)
//    else
//     If IsWin64 then
//       ProgressPage.SetText(ExpandConstant('{cm:InstallPrinterdriver}'),WinXP2003_32bit)
//      else
//       ProgressPage.SetText(ExpandConstant('{cm:InstallPrinterdriver}'),Win2003);
  //AdditionalPrinterProgressIndex:=AdditionalPrinterProgressIndex+1;
  //ProgressPage.SetProgress(AdditionalPrinterProgressIndex, AdditionalPrinterProgressSteps);
  DI3.cVersion:=3;
  if InstallOnThisVersion('0,5.0.2195','0,5.01.2600')=irInstall then begin
    DI3.pDependentFiles :='PSCRPTFE.NTF'#0+'PSCRIPT.NTF'#0#0
  end
  else begin
    DI3.pDependentFiles :='PSCRIPT.NTF'#0#0;
  end;
  DI3.pConfigFile :='PS5UI.DLL';
  DI3.pDriverPath := 'PSCRIPT5.DLL';
  DI3.pEnvironment:='Windows NT x86';
  DI3.pHelpFile :='PSCRIPT.HLP';
  DI3.pDataFile :='CUBEPDF.PPD';
  DI3.pDefaultDataType :='RAW';
  DI3.pMonitorName :='';

  SaveStringToFile(LogFile, 'Install printerdriver for Win2kXP2k3 (32bit):' + #13#10, True)
  SaveStringToFile(LogFile, ' Drivername : ' + DI3.pName  + #13#10, True)
  SaveStringToFile(LogFile, ' Environment : ' + DI3.pEnvironment  + #13#10, True)

  res := AddPrinterDriver(Chr(0), 3, DI3);

  if res=0 then begin
    Result:=False;
    SaveStringToFile(LogFile, ' Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
  end else
    SaveStringToFile(LogFile, ' Result: Success' + #13#10#13#10, True);
 end;
// WinXP, Win2003 - 64bit
 If InstallWinXP2k3Printerdriver64bit then begin
  //ProgressPage.SetText(ExpandConstant('{cm:InstallPrinterdriver}'),WinXP2003_64bit);
  //AdditionalPrinterProgressIndex:=AdditionalPrinterProgressIndex+1;
  //ProgressPage.SetProgress(AdditionalPrinterProgressIndex, AdditionalPrinterProgressSteps);
  DI3.cVersion:=3;
  DI3.pDependentFiles :='PSCRIPT.NTF'#0#0;
  DI3.pConfigFile :='PS5UI.DLL';
  DI3.pDriverPath := 'PSCRIPT5.DLL';
  DI3.pEnvironment:='Windows x64';
  DI3.pHelpFile :='PSCRIPT.HLP';
  DI3.pDataFile :='CUBEPDF.PPD';
  DI3.pDefaultDataType :='RAW';
  DI3.pMonitorName :='';

  SaveStringToFile(LogFile, 'Install printerdriver for WinXP2k3:' + #13#10, True)
  SaveStringToFile(LogFile, ' Drivername : ' + DI3.pName  + #13#10, True)
  SaveStringToFile(LogFile, ' Environment : ' + DI3.pEnvironment  + #13#10, True)

  res := AddPrinterDriver(Chr(0), 3, DI3);

  if res=0 then begin
    Result:=False;
    SaveStringToFile(LogFile, ' Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
  end else
    SaveStringToFile(LogFile, ' Result: Success' + #13#10#13#10, True);
 end;
end;

// ------------------------------------------------------------------------- //
//  InstallPrinter
// ------------------------------------------------------------------------- //
function InstallPrinter:Boolean;
var
 P2: TPrinterInfo2; res: LongInt; Printers : Array of TPrinterInfo2; c:LongInt;
begin
 Result:=True;
 P2.pPrinterName := 'CubePDF';
 P2.pDriverName := 'CubePDF';
 P2.pPrintProcessor := 'WinPrint';
 P2.pPortName := 'CubePDF:';
 P2.pComment := 'CubePDF Virtual Printer';
 P2.pSharename:= 'CubePDF';
 P2.Priority:=1;
 P2.DefaultPriority:=1;
 P2.pDatatype:='RAW';

 c:=GetPrinters(Printers);
 If c=0 then
   P2.Attributes :=4 // Set as defaultprinter
  else
   P2.Attributes :=0;

 SaveStringToFile(LogFile, 'InstallPrinter:' + #13#10, True)
 SaveStringToFile(LogFile, ' Printername: ' + P2.pPrintername + #13#10, True)
 SaveStringToFile(LogFile, ' Drivername : ' + P2.pDrivername  + #13#10, True)
 SaveStringToFile(LogFile, ' Portname   : ' + P2.pPortname    + #13#10, True)

 res := AddPrinter('', 2, P2);

 if res<>0 then begin
   ClosePrinter(res);
   SaveStringToFile(LogFile, ' Result: Success' + #13#10, True)
   if c=0 then begin
    // Set as defaultprinter
    SetIniString('windows','device','CubePDF,PSCRIPT,CubePDF',ExpandConstant('{win}')+'\win.ini')
   end
  end else begin
   Result:=False;
   SaveStringToFile(LogFile, ' Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10, True)
 end;
 //If UsingWinNT=false then
 // SendMessage(65535, 26, 0, CastStringToInteger(PrintSystem)); // Ini-Refresh !!! Important for Win9x/Me
end;

function IsPrinterdriverInstalled(PrinterdriverName: String; Environment: String): Boolean;
var
 c, i: LongInt;
 PrinterDrivers: Array of TDriverInfo3;
begin
 c:=GetPrinterDrivers(PrinterDrivers, Environment);
 for i:=0 to c-1 do
  If Uppercase(PrinterDrivers[i].pName)=Uppercase(PrinterdriverName) then begin
   result:=true;
   exit
  end
end;

function InitializeSetup(): Boolean;
var
 a:Longint;
 ErrorCode: Integer;
 wnd: HWND;
begin
 //If IsPrinterdriverInstalled('CubePDF', '') then begin
//	MsgBox('CubePDF printer driver is already installed.', mbInformation, MB_OK);
//	Result := False;
//	exit;
// end;

 if (IsWindows9x() = True or IsWindowsNT() = True) then begin
	MsgBox(CustomMessage('win9x'), mbInformation, MB_OK);
	Result := False;
	exit;
 end;

 if (IsDotNetDetected('v2.0.50727', 0) = False) then begin
	if (MsgBox(CustomMessage('dotnet'), mbConfirmation, MB_YESNO) = IDYES) then begin
		ShellExec('open', 'http://www.microsoft.com/downloads/details.aspx?FamilyID=9cfb2d51-5ff4-4491-b0e5-b386f32c0992','', '', SW_SHOW, ewNoWait, ErrorCode);
	end;
	Result := False;
	exit;
 end;

 wnd := FindWindowByWindowName('CubePDF');
 if (Not (wnd = 0)) then begin
	if (MsgBox(CustomMessage('locked'), mbConfirmation, MB_YESNO) = IDYES) then begin
		PostMessage(wnd, 18, 0, 0);
	end
	else begin
		Result := False;
		exit;
	end;
 end;

 Win9x:=   'Windows 95, Windows 98, Windows Me';
 WinNt:=   'Windows NT 4.0';
 Win2000:= 'Windows 2000';
 WinXP:=   'Windows XP';
 Win2003:= 'Windows 2003';
 WinXP2003_32bit:= 'Windows XP/2003 - 32bit';
 WinXP2003_64bit:= 'Windows XP/2003 - 64bit';
 PrinterMonitorname:= 'CubePDF';
 PrinterPortname:=    'CubePDF:';
 PrinterDrivername:=  'CubePDF';
 Printername:=        'CubePDF';
 Result := true;
end;

procedure InitializeWizard();
var
	s: String;
begin
	//UpdatePage := CreateInputOptionPage(wpSelectTasks,
	//	CustomMessage('UpdateTitle'),
	//	CustomMessage('UpdateDescription'),
	//	CustomMessage('UpdateSubtitle'),
	//	True, False);
	//UpdatePage.Add(CustomMessage('Yes'));
	//UpdatePage.Add(CustomMessage('No'));
	//UpdatePage.Values[0] := True;

	// NOTE: Remove installing additional tools.

	//s:='SOFTWARE\Microsoft\Windows\CurrentVersion\Uninstall\天気予報コム for Windows_is1';
    //If (RegKeyExists(HKLM,s) = True) then IsInstalledWeather := True
    //else begin
	//	IsInstalledWeather := False;
	//	ToolbarPage := CreateInputOptionPage(UpdatePage.ID,
	//		CustomMessage('ToolbarTitle'),
	//		CustomMessage('ToolbarDescription'),
	//		CustomMessage('ToolbarSubtitle'),
	//		False, False);
	//	ToolbarPage.Add(CustomMessage('ToolbarWeather'));
	//	ToolbarPage.Values[0] := True;
    //end;
end;

function IsInstallWeather(): Boolean;
begin
	//if (IsInstalledWeather = True) then Result := False
	//else begin
	//	if (ToolbarPage.Values[0] = True) then Result := True
	//	else Result := False;
	//end;
	Result := False;
end;

function IsCheckUpdate(): Boolean;
begin
	//if (UpdatePage.Values[0] = True) then Result := True
	//else Result := False;
	Result := True;
end;

procedure CurStepChanged(CurStep: TSetupStep);
var
 s, sfn, icc, SubKeyName : String;
 Ports: Array of TPortInfo2;
 PrinterDrivers: Array of TDriverInfo3;
 Printers: Array of TPrinterInfo2;
 Monitors : Array of TMonitorInfo1;
 res, tres: Boolean;
 ErrCode: Integer;
begin
  if CurStep = ssPostinstall then begin
	LogFile := ExpandConstant('{app}') + '\install.log';
	try
		if (IsCheckUpdate() = True) then begin
			RegWriteDWordValue(HKCU, 'Software\CubePDF', 'CheckUpdate',1);
			RegWriteStringValue(HKCU,
				'Software\Microsoft\Windows\CurrentVersion\Run',
				'cubepdf-checker',
				ExpandConstant('{app}\') + 'cubepdf-checker.exe');
		end;

		PrintSystem:='windows';
		res:=true;
		GetPorts(Ports);

		s := 'CubePDF';
		tres := InstallMonitor(s);
		res := res and tres;
		s := '';

		GetMonitors(Monitors);
		GetPorts(Ports);
		tres:=InstallDriver;
		res:=res and tres;
		//AdditionalPrinterProgressIndex:=AdditionalPrinterProgressIndex+1;
		//ProgressPage.SetProgress(AdditionalPrinterProgressIndex, AdditionalPrinterProgressSteps);

		//ProgressPage.SetText(ExpandConstant('Install printer'), 'CubePDF');
		//GetPrinterdrivers(PrinterDrivers,'Windows 4.0');
		GetPrinterdrivers(PrinterDrivers,'Windows NT x86');
		GetPrinterdrivers(PrinterDrivers,'Windows x64');
		tres:=InstallPrinter;
		res:=res and tres;
		//AdditionalPrinterProgressIndex:=AdditionalPrinterProgressIndex+1;
		//ProgressPage.SetProgress(AdditionalPrinterProgressIndex, AdditionalPrinterProgressSteps);
		If UsingWinNT=true then begin
			s:='SYSTEM\CurrentControlSet\Control\Print\Printers\CubePDF\PrinterDriverData';
			If RegKeyExists(HKLM,s)=true then
			RegWriteDWordValue(HKLM,s,'FreeMem',32767);
		end

		If (IsInstallWeather() = True) then
		begin
			ExtractTemporaryFile('dayzwt213-www2.exe');
			Exec(ExpandConstant('{tmp}\')+'dayzwt213-www2.exe',
				'/VERYSILENT', '', SW_SHOW, ewWaitUntilTerminated, ErrCode);
		end

		ExtractTemporaryFile('cube-key-gen.exe');
		Exec(ExpandConstant('{tmp}\') + 'cube-key-gen.exe',
			'Software\CubePDF InstallKey', '', SW_HIDE, ewWaitUntilTerminated, ErrCode);

		Exec(ExpandConstant('{app}\') + 'cubepdf-checker.exe',
			'', '', SW_SHOW, ewNoWait, ErrCode);
    finally
      if res=false then
       //MsgBox(ExpandConstant('{cm:PrinterInstallationFailed}'),mbError,MB_OK + MB_SETFOREGROUND);
       SaveStringToFile(LogFile, 'error: something was occured.' + #13#10, True);
       //ProgressPage.Hide;
    end;
 end;
end;

function UpdateReadyMemo(Space, NewLine, MemoUserInfoInfo, MemoDirInfo, MemoTypeInfo,
  MemoComponentsInfo, MemoGroupInfo, MemoTasksInfo: String): String;
var
	memo: String;
begin
	memo := '';
	memo := memo + MemoDirInfo + NewLine + NewLine;

	if (Length(MemoGroupInfo) > 0) then begin
		memo := memo + MemoGroupInfo + NewLine + NewLine;
	end;

	//memo := memo + CustomMessage('UpdateTitle') + ':' + NewLine;
	//memo := memo + Space;
	//if (IsCheckUpdate() = True) then memo := memo + CustomMessage('Yes')
	//else memo := memo + CustomMessage('No');
	//memo := memo + NewLine + NewLine;

	if (IsInstallWeather() = True) then begin
		memo := memo + CustomMessage('ToolbarTitle') + ':' + NewLine;
		memo := memo + Space + CustomMessage('ToolbarWeather') + NewLine;
		memo := memo + NewLine;
	end;

	Result := memo;
end;

// UnInstall
function DeleteWindowsPrinter(Printername:String; Logfile: String):LongInt;
var
 pd:TPrinterDefaults; res, pHandle:LongInt;
begin
 Result:=0;
 SaveStringToFile(LogFile, ' Uninstall printer:' + #13#10, True)
 SaveStringToFile(LogFile, '  Printername : ' + Printername + #13#10, True)
 pd.pDatatype := 0;
 pd.pDevMode := 0
 pd.DesiredAccess := PRINTER_ALL_ACCESS
 SaveStringToFile(LogFile, '  Open printer' + #13#10, True)
 res := OpenPrinter(Printername, pHandle, pd);
 If res <> 0 Then begin
   SaveStringToFile(LogFile, '   Result: Success' + #13#10, True);
   SaveStringToFile(LogFile, '  Delete printer' + #13#10, True)
   res := DeletePrinter(pHandle)
   If res <> 0 Then begin
     SaveStringToFile(LogFile,  '   Result: Success' + #13#10, True);
     SaveStringToFile(LogFile, '  Close printer' + #13#10, True)
     res := ClosePrinter(pHandle);
     if res <> 0 then
       SaveStringToFile(LogFile, '   Result: Success' + #13#10#13#10, True)
      else begin
       result:=1;
       SaveStringToFile(LogFile, '   Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
      end
    end else begin
     result:=1;
     SaveStringToFile(LogFile, '   Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
    end
  end else begin
   result:=1
   SaveStringToFile(LogFile, '   Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
 end;
end;

procedure UninstallCompletePrinter(PrinterMonitorname:String; PrinterPortname: String; PrinterDrivername: String; Printername:String; LogFile: String);
var
 res, resUI, c, i: LongInt;
 CubePDFPrinters: Array of TPrinterInfo2;
 Ports: TArrayofString; Environment: String;
begin
 SaveStringToFile(LogFile, #13#10, True)

 //SaveSpoolerServiceInformation(LogFile);
 c:=GetCubePDFPrinters(CubePDFPrinters);
 For i:=0 to c-1 do
  resUI:=DeleteWindowsPrinter(CubePDFPrinters[i].pPrinterName, UninstallLogfile);

 SaveStringToFile(LogFile, ' Uninstall printer driver for Win95/98/Me:' + #13#10, True)
 SaveStringToFile(LogFile, '  Drivername : ' + PrinterDrivername + #13#10, True)
 Environment:='Windows 4.0';
 If IsPrinterdriverInstalled(PrinterdriverName, Environment) then begin
  res:=DeletePrinterDriver('',Environment, PrinterDrivername);
  if res=0 then begin
    resUI:=resUI+1;
    SaveStringToFile(LogFile, '  Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
   end else
    SaveStringToFile(LogFile, '  Result: Success' + #13#10#13#10, True);
 end;

 SaveStringToFile(LogFile, ' Uninstall printerdriver for WinNT/Win2000/WinXP/Win2003 32bit:' + #13#10, True)
 SaveStringToFile(LogFile, '  Drivername : ' + PrinterDrivername + #13#10, True)
 Environment:='Windows NT x86';
 If IsPrinterdriverInstalled(PrinterdriverName, Environment) then begin
  res:=DeletePrinterDriver('',Environment, PrinterDrivername);
  if res=0 then begin
    resUI:=resUI+1;
    SaveStringToFile(LogFile, '  Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
   end else
    SaveStringToFile(LogFile, '  Result: Success' + #13#10#13#10, True);
 end;

 SaveStringToFile(LogFile, ' Uninstall printerdriver for WinNT/Win2000/WinXP/Win2003 64bit:' + #13#10, True)
 SaveStringToFile(LogFile, '  Drivername : ' + PrinterDrivername + #13#10, True)
 Environment:='Windows x64';
 If IsPrinterdriverInstalled(PrinterdriverName, Environment) then begin
  res:=DeletePrinterDriver('',Environment, PrinterDrivername);
  if res=0 then begin
    resUI:=resUI+1;
    SaveStringToFile(LogFile, '  Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
   end else
    SaveStringToFile(LogFile, '  Result: Success' + #13#10#13#10, True);
 end;

 SaveStringToFile(LogFile, ' Uninstall printer ports:' + #13#10, True)
 //c:=GetPorts2(Ports, PrinterPortname);
 //For i:=0 to c-1 do begin
 // SaveStringToFile(LogFile, '  Portname : ' + Ports[i] + #13#10, True)
 // res:=DeletePort('',0,Ports[i]);
 // if res=0 then begin
 //   resUI:=resUI+1;
 //   SaveStringToFile(LogFile, '  Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
 //  end else
 //   SaveStringToFile(LogFile, '  Result: Success' + #13#10#13#10, True);
 //end;

 SaveStringToFile(LogFile, ' Uninstall printer monitor:' + #13#10, True)
 SaveStringToFile(LogFile, '  Monitorname : ' + PrinterMonitorname + #13#10, True)
 res:=DeleteMonitor('','',PrinterMonitorname);
 if res=0 then begin
   resUI:=resUI+1;
   SaveStringToFile(LogFile, '  Result: Error ' + IntToStr(GetLastError()) + ' = ' + SysErrorMessage(GetLastError()) + #13#10#13#10, True)
  end else
   SaveStringToFile(LogFile, '  Result: Success' + #13#10#13#10, True);
 //if resUI>0 then begin
 //  SetDummyRunOnce;
 //  SaveStringToFile(LogFile, 'Need restart: True' + #13#10, True)
 // end else
 //  SaveStringToFile(LogFile, 'Need restart: False' + #13#10#, True);
end;

function InitializeUninstall(): Boolean;
begin
 PrinterMonitorname:='CubePDF';
 PrinterPortname:='CubePDF:';
 PrinterDrivername:='CubePDF';
 Printername:='CubePDF';
 UninstallLogFile:=ExpandConstant('{%tmp}')+'\CubePDFUninstall.txt';
 SaveStringToFile(UninstallLogFile, 'Start uninstall:' + #13#10, False)
 Result:=True;
end;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  case CurUninstallStep of
    usUninstall:
      begin
       UninstallCompletePrinter(PrinterMonitorname, PrinterPortname, PrinterDrivername, Printername, UninstallLogFile)
      end;
  end;
end;




















